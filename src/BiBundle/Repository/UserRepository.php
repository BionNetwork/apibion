<?php

namespace BiBundle\Repository;

use Doctrine\ORM\AbstractQuery;
use BiBundle\Entity\User;
use Doctrine\ORM\Query\Expr\Join;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Возвращает список пользователей по части имени
     *
     * @param string $firstName Часть имени пользователя
     *
     * @return User[]
     */
    public function findUser($firstName)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('u')
            ->from('BiBundle:User', 'u')
            ->where('LOWER (u.firstname) LIKE LOWER(:query)')
            ->setParameter('query', '%' . $firstName . '%');
        $query = $qb->getQuery();
        $userList = $query->getResult();
        return $userList;
    }

    /**
     * Get user status
     *
     * @param $code
     * @return null|object|\BiBundle\Entity\UserStatus
     */
    public function getStatus($code)
    {
        $repository = $this->getEntityManager()->getRepository('BiBundle:UserStatus');
        return $repository->findOneBy(['code' => $code]);
    }

    /**
     * Get user role
     *
     * @param $code
     * @return null|object|\BiBundle\Entity\UserRole
     */
    public function getRole($code)
    {
        $repository = $this->getEntityManager()->getRepository('BiBundle:UserRole');
        return $repository->findOneBy(['name' => $code]);
    }

    /**
     * Поиск пользователя
     *
     * @param $query string
     *
     * @return array
     */
    public function search($query = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $select = $qb->select([
            'u.id',
            'u.firstname',
            'u.middlename',
            'u.lastname',
            'u.position',
            'u.avatarSmall as photo'
        ])
            ->from('BiBundle:User', 'u');
        if (!empty($query)) {
            $select->orWhere('lower(u.firstname) LIKE lower(:query)')
                ->orWhere('lower(u.middlename) LIKE lower(:query)')
                ->orWhere('lower(u.lastname) LIKE lower(:query)')
                ->orWhere('lower(u.position) LIKE lower(:query)')
                ->orWhere('u.login = :strict_query')
                ->orWhere('u.phone = :strict_query')
                ->setParameter('query', '%' . $query . '%')
                ->setParameter('strict_query', $query);
        }

        $select->setMaxResults(1000);

        $result = $select->getQuery()->getResult();
        return $result;
    }

    /**
     * Получение карточек
     *
     * @param \BiBundle\Entity\User $user
     * @return \BiBundle\Entity\Card[]
     */
    public function getUserCards($user) {

        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('c')
            ->from('BiBundle:Card', 'c')
            ->innerJoin('BiBundle:UserCard', 'uc', Join::WITH, 'c.id = uc.card')
            ->where('uc.user = :user_id')
            ->setParameter('user_id', $user->getId());
        $query = $qb->getQuery();

        $cardList = $query->getResult();
        return $cardList;
    }
}
